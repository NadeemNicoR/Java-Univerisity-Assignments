08-01: Topological Sorting
*Please answer every theoretical question regarding this task here*

Backward: Starting vertex being - 3
         3,8,11,2,16,7,13,15,9,14,12,10,1,6,4,5
Forward: Starting vertex being- 5
         5,4,7,15,1,6,13,10,2,16,12,11,9,14,8,3
----------------------------------------------------------------------------------------------------------------------
08-02: Lowest Cost & Shortest Path Problem
*Please answer every theoretical question regarding this task here*

Dijkstra’s Algorithm :(start vertex 0)

0	0	0	0	0	0	0	0
1	inf	2	2	2	2	2	2
2	inf	5	5	4	4	4	4
3	inf	3	3	3	3	3	3
4	inf	inf	inf	inf	11	11	11
5	inf	inf	6	6	6	6	6

Vertices visited in order: 		0,1,3,2,4,5
		
Prim-Jarnik Algorithm:(start vertex 0)

Edge Added      List 1          List 2 
                [0]             [1,2,3,4,5] (vertex cost=infinity)
[0 to 1]        [0,1]           [2,3,4,5]
[1 to 5]        [0,1,5]         [2,3,4]
[5 to 3]        [0,1,5,3]       [2,4]
[3 to 2]        [0,1,5,3,2]     [4]
[2 to 4]        [0,1,5,3,2,4]   []

Vertices visited in order: 		0,1,5,3,2,4
----------------------------------------------------------------------------------------------------------------------- 		
08-03: Knapsack Problem
*Please answer every theoretical question regarding this task here*

Greedy search:

Objects(#)      1     2     3      4
Benefit(€)      3     5     8      9
Weight(kg)      3     4     6      7
Profit(€/kg)    1    1.25   1.33   1.28


Criteria : to achieve maximum benefit 
Constraint: total capacity of the bag must be <=15 kg

Object 3 - weight: 6kg 	| capacity of bag left is 15kg - 6kg =9 kg
Object 4 - weight: 7kg	| capacity of bag left is 9kg -7kg = 2kg
Object 2 - weight: 2kg  | capacity of bag left is 2kg-2kg = 0kg

thus knapsack can be filled with 6kg of object 3, 7 kg of object 4 and 2 kg of object 2 by achieving a maximum benefit of 19.5€
Solution depends on the decision criterion and there is no guarantee that the optimal configuration is achieved. 


Dynamic Programming:

Benefit	  Weight	Object  0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15
  0	      0	         0      0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
  3	      3	         1      0   0   0   3   3   3   3   3   3   3   3   3   3   3   3   3
  5	      4	         2      0   0   0   3   5   5   5   8   8   8   8   8   8   8   8   8
  8	      6	         3      0   0   0   3   5   5   8   8   8   11  13  13  13  16  16  16
  9	      7	         4      0   0   0   3   5   5   8   9   9   11  13  14  14  17  17  17
  
From the table that we built, we select the object with the highest benefit:

Initially we select object 4, which has a weight of 7kg. Now we have 8 kg left from the 15 kg max.capacity. 
The next object with the highest benefit is object 3 with a weight of 6 kg. Now we have 2 kg left to fill. 
The objects left are 1 and 2 which have a weight higher than 2 kg. 
since the fractions of weights are not allowed, we are left with 2 kg space with object 3 and 4 inside.

total benefit = 17+16 = 33
total weight of the bag used = 7+6= 13Kgs
  
